name: Code Quality

env:
  FLUTTER_VERSION: '2.10.0'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

concurrency:
  group:  ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  Basic-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: gitleaks-action
        uses: zricethezav/gitleaks-action@master
        with:
          config-path: .gitleaks.toml

      - name: Install Flutter
        uses: britannio/action-install-flutter@v1
        with:
          version: $FLUTTER_VERSION

      - name: Install lcov and jq
        run: |
          sudo apt install lcov jq

      - name: Run checks
        timeout-minutes: 20
        env:
          SEARCH_API_SECRET_DEBUG: ${{ secrets.SEARCH_API_SECRET_DEBUG }}
          SEARCH_API_SECRET_PRODUCTION: ${{ secrets.SEARCH_API_SECRET_PRODUCTION }}
          INSTABUG_TOKEN_DEBUG: ${{ secrets.INSTABUG_TOKEN_DEBUG }}
          INSTABUG_TOKEN_PRODUCTION: ${{ secrets.INSTABUG_TOKEN_PRODUCTION }}
          AMPLITUDE_API_KEY_DEBUG: ${{ secrets.AMPLITUDE_API_KEY_DEBUG }}
          AMPLITUDE_API_KEY_PRODUCTION: ${{ secrets.AMPLITUDE_API_KEY_PRODUCTION }}
          APPSFLYER_DEV_KEY: ${{ secrets.APPSFLYER_DEV_KEY }}
          FASTLANE_SKIP_UPDATE_CHECK: '1'
        working-directory: ./application
        run: |
          sudo chmod -R a+w /var/lib/gems/
          fastlane check coverage:true

      - name: Create coverage
        if: (github.event_name != 'push')
        working-directory: ./application
        env:
          USER: ${{ secrets.GH_USER }}
          TOKEN: ${{ secrets.GH_TOKEN }}
          MIN_NEW_COVERED: 0.8
        run: |
          last_lcov_url=$(curl -u $USER:$TOKEN -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/xaynetwork/xayn_discovery_app/actions/artifacts | jq -r '[.artifacts[] | select( .name == "lcov")][0] | .archive_download_url')
          if [ -n "$last_lcov_url" ] && [ "$last_lcov_url" != "null" ]; then
            curl -L -H "Accept: application/vnd.github.v3+json" -o last_lcov.zip -u $USER:$TOKEN $last_lcov_url
            unzip last_lcov.zip -d last_lcov
          fi
          current_cov=($(genhtml coverage/lcov.info -o coverage/html | grep lines | grep -Eo '[0-9]{1,10}[.]{0,1}[0-9]{0,2}' | sed 's/%//g'))
          if [ -f "last_lcov/lcov.info" ]; then
            last_cov=($(genhtml last_lcov/lcov.info -o coverage/last_html | grep lines | grep -Eo '[0-9]{1,10}[.]{0,1}[0-9]{0,2}' | sed 's/%//g'))
          else
            last_cov=(0 0 0)
          fi
          last_cov_percent=${last_cov[0]}
          last_cov_lines=${last_cov[1]}
          last_cov_total=${last_cov[2]}
          current_cov_percent=${current_cov[0]}
          current_cov_lines=${current_cov[1]}
          current_cov_total=${current_cov[2]}
          newlines=$(echo "($current_cov_total - $last_cov_total)" | bc -l)
          newtests=$(echo "($current_cov_lines - $last_cov_lines)" | bc -l)
          new_covered=$(echo "$newtests / $newlines" | bc -l)
          echo "Last Coverage: $last_cov_percent%"
          DESCRIPTION="Current Coverage: $current_cov_percent% ($last_cov_percent%), covered $new_covered of new lines (added $newlines lines and $newtests lines of tests, just $new_covered covered of new lines (MIN: $MIN_NEW_COVERED))"
          echo $DESCRIPTION
          isIncreased=$( echo "$current_cov_percent >= $last_cov_percent" | bc -l )
          isLinesCovered=$( echo "$new_covered > $MIN_NEW_COVERED" | bc -l )
          if (( isIncreased ))
          then
            echo "Good Job, you increased the coverage."
            STATE=success
          elif (( isLinesCovered ))
          then
            echo "Good Job, you covered enough lines."
            STATE=success
          else
            echo "Too bad, you decreased the coverage or have not covered enough lines."
            STATE=failure
          fi
          echo "coverage=$STATE" >> $GITHUB_ENV
          echo "coverage_description=$DESCRIPTION" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: coverage_report
          path: application/coverage/html

# Disabled for now because we are not testing the UI thus coverage thresholds can not be enforced reliable
#      - name: Show coverage status
#        uses: actions/github-script@v3
#        env:
#          COVERAGE : ${{ env.coverage }}
#          COVERAGE_DESCRIPTION : ${{ env.coverage_description }}
#        with:
#          script: |
#            const { COVERAGE, COVERAGE_DESCRIPTION } = process.env
#            if ( COVERAGE == "failure") {
#              core.setFailed(COVERAGE_DESCRIPTION)
#            }

      - uses: actions/upload-artifact@v2
        if: (github.event_name == 'push')
        with:
          name: lcov
          path: application/coverage/lcov.info
