def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


def dartEnvironmentVariables = [
        USER_APP_NAME: 'Discovery',
        USER_APP_ID  : 'com.xayn.discovery.internal'
]
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                print entry
                def pair = new String(Base64.getDecoder().decode(entry), "UTF-8").split('=')
                [(pair.first()): pair.last()]
            }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId dartEnvironmentVariables.USER_APP_ID
        minSdkVersion 21
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
        resValue "string", "app_name", dartEnvironmentVariables.USER_APP_NAME
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? rootProject.file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }

        debug {
            storeFile rootProject.file("debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'

            ndk {
                /// TEMPORARY disabling armeabi-v7 so that Yellow can fix some v7 issues in the meanwhile
                /// "armeabi", "armeabi-v7a",
                abiFilters "arm64-v8a"
            }
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    buildTypes.each {
        it.buildConfigField 'java.util.Hashtable<String, String>', 'CustomKeys', makePropertyHashTable('custom.properties')
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:multidex:2.0.1"
}

// A function that makes it easy to generate buildConfigField and thus having less boilerplate
// when adding custom keys/tokens
//
// INPUT: filename containing key value pairs of keys
// OUTPUT: a string format of HashMap<String, String>
def makePropertyHashTable(filename) {
    def properties = new Properties()
    def propertiesFile = rootProject.file(filename)
    if (propertiesFile.exists()) {
        properties.load(new FileInputStream(propertiesFile))
    } else {
        throw new GradleException("Could not find ${filename} file.")
    }

    def prefix = 'new java.util.Hashtable<String, String>(){{ '
    def suffix = '}}'
    def value = ''
    if (properties != null) {
        for (d in properties) {
            value += String.format('put("%s",%s); ', d.key, "\"${d.value}\"")
        }
    }
    return String.format('%s%s%s', prefix, value, suffix)
}
