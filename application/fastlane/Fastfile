# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

import("../ios/fastlane/Fastfile")
import("lib/properties.rb")
import("lib/git.rb")

#ios, android, web
platform = "android"

#apk, appbundle
android_output = "apk"

#internal, external
flavor = "internal"

#release, debug
build = "debug"

# env defaults that will be used when no ENV variables are provided
ENV_DEFAULTS = { "SEARCH_API_URL_DEBUG" => "api-gw.xaynet.dev",
                 "SEARCH_API_URL_PRODUCTION" => "api-gw.xayn.com",
                 "IMAGE_FETCHER_URL_DEBUG" => "https://img-fetcher.xaynet.dev",
                 "IMAGE_FETCHER_URL_PRODUCTION" => "https://img-fetcher.xayn.com" }

# Common checks before running a lane
before_all do |lane, options|
  options[:platform] = options[:platform] || platform
  options[:android_output] = options[:android_output] || android_output
  options[:flavor] = options[:flavor] || flavor
  options[:build] = options[:build] || build
  options[:coverage] = options[:coverage] || false
  ## downloading the iOS adhoc profile
  options[:downloadProfile] = options[:downloadProfile] || false

  version_name = gitVersionName()
  build_number = gitVersionNumber()
  options[:build_number] = options[:build_number] || build_number
  options[:version_name] = options[:version_name] || version_name
  puts options
end

# Private lanes, that we only call internally, they are nice because they have an own description
desc "Flutter build"
private_lane :flutter_build do |options|
  clean(options)
  pub_get(options)
  build_runner(options)

  target = options[:platform] == "android" ? options[:android_output] : options[:platform]
  type = options[:build] == "release" ? "--release" : "--debug"
  codesign = options[:platform] == "ios" ? "--no-codesign" : ""

  flutter("build #{target} #{type} #{codesign} --build-number=#{options[:build_number]} --build-name=#{options[:version_name]} --dart-define=GIT_TAG=#{options[:version_name]}")
end

desc "Build internal apk"
private_lane :android_prepare_internal do |options|
  UI.user_error!("No PROVISIONING_PASSWORD provided!") unless ENV.key?("PROVISIONING_PASSWORD")
  provisionigPassword = ENV["PROVISIONING_PASSWORD"]
  setProperties("../android/key.properties", {
    :storePassword => provisionigPassword,
    :keyPassword => provisionigPassword,
    :keyAlias => "release",
    :storeFile => "internal_release.jks",
  })
end

####
#### Public lanes, can also be used via tab completion: `fastlane enable_auto_complete`
####

desc "Update strings"
lane :update_strings do |options|
  download_translations(
    api_token: "***REMOVED***",
    project_id: "502883",
    languages: "de,en",
    output_dir: "lib/presentation/constants/translations/",
  )
  # Need to move default language file to translations.i18n.yaml for the i18n build generator
  shell("mv lib/presentation/constants/translations/translations_en.i18n.yaml lib/presentation/constants/translations/translations.i18n.yaml")
  build_runner(options)
end

desc "Flutter build runner"
lane :build_runner do |options|
  check_config_files(options)
  command = "pub  run build_runner build --delete-conflicting-outputs"
  begin
    flutter(command)
  rescue => ex
    pub_get(options)
    flutter(command)
  end
end

desc "Checks alle the config (env, properties, etc) if they are correctly set"
lane :check_config_files do |options|
  askAndSetProperties("../.env.dev",
                      {
    "SEARCH_API_URL_DEBUG" => "SEARCH_API_BASE_URL",
    "SEARCH_API_SECRET_DEBUG" => "SEARCH_API_SECRET_KEY",
    "IMAGE_FETCHER_URL_DEBUG" => "IMAGE_FETCHER_URL",
    "INSTABUG_TOKEN_DEBUG" => "INSTABUG_TOKEN",
    "AMPLITUDE_API_KEY_DEBUG" => "AMPLITUDE_API_KEY",
  })

  askAndSetProperties("../.env.prod",
                      {
    "SEARCH_API_URL_PRODUCTION" => "SEARCH_API_BASE_URL",
    "SEARCH_API_SECRET_PRODUCTION" => "SEARCH_API_SECRET_KEY",
    "IMAGE_FETCHER_URL_PRODUCTION" => "IMAGE_FETCHER_URL",
    "INSTABUG_TOKEN_PRODUCTION" => "INSTABUG_TOKEN",
    "AMPLITUDE_API_KEY_PRODUCTION" => "AMPLITUDE_API_KEY",
  })

  if options[:flavor] != "internal" && options[:release] != "debug"
    askAndSetProperties("../android/custom.properties", { "INSTABUG_TOKEN_PRODUCTION" => "INSTABUG_TOKEN" })
  else
    askAndSetProperties("../android/custom.properties", { "INSTABUG_TOKEN_DEBUG" => "INSTABUG_TOKEN" })
  end
end

desc "Flutter pub get"
lane :pub_get do |options|
  flutter("pub get")
end

desc "Watch changes for rerunning the build_runner"
lane :watch do |options|
  flutter("packages pub run build_runner watch --delete-conflicting-outputs")
end

desc "Flutter clean"
lane :clean do |options|
  flutter("clean")
end

desc "Sanity checks (options: coverage:[true/FALSE])"
lane :check do |options|
  pub_get(options)
  if Dir.glob("../**/env.g.dart").empty?
    build_runner(options)
  end
  flutter("analyze lib test")
  if is_ci
    flutter("format ./ --set-exit-if-changed")
  else
    flutter("format ./")
  end
  if options[:coverage]
    # Creates a fake test that imports all files so that lcov calculates the correct coverage
    shell('find lib ! -name "*.freezed.dart" ! -name "*.config.dart" ! -name "*.g.dart" ! -name "generated_plugin_registrant.dart"  -name *.dart  | sed \'s/lib\///\' | sed  \'s/.*/import "package:xayn_discovery_app\/&";/\' > test/all_imports_test.dart')
    shell("cat test/test_stub.dart >> test/all_imports_test.dart")
    flutter("test --coverage")
    lcov_ignore_rules = shell("cat lcov_ignore | grep -v \\# | tr '\n' ' '")
    shell("mv coverage/lcov.info coverage/original_lcov.info")
    shell("lcov --remove coverage/original_lcov.info #{lcov_ignore_rules} -o coverage/lcov.info")
    shell("genhtml coverage/lcov.info -o coverage/html")
  else
    flutter("test")
  end
end

desc "Build and publish (i.e fastlane publish platform:ios build:release)"
lane :publish do |options|
  if options[:platform] == "android"
    android_prepare_internal
  end
  flutter_build(options)
  if options[:platform] == "ios"
    Dir.chdir("../ios/fastlane") do
      ios_create_ipa(options)
    end
    UI.user_error!("No $APPCENTER_IOS_INTERNAL_TOKEN provided!") unless ENV.key?("APPCENTER_IOS_INTERNAL_TOKEN")
    uploadToAppCenter(
      ENV["APPCENTER_IOS_INTERNAL_TOKEN"],
      "Discovery-App-internal",
      "build/discovery-app.ipa",
      options[:version_name]
    )
  else
    UI.user_error!("No $APPCENTER_IOS_ANDROID_TOKEN provided!") unless ENV.key?("APPCENTER_ANDROID_INTERNAL_TOKEN")
    uploadToAppCenter(
      ENV["APPCENTER_ANDROID_INTERNAL_TOKEN"],
      "Discovery-App-Android-internal",
      "build/app/outputs/flutter-apk/app-release.apk",
      options[:version_name]
    )
  end
end

# Private helper methods
def flutter(args)
  Dir.chdir("..") do
    sh "flutter #{args}"
  end
end

def shell(args)
  Dir.chdir("..") do
    sh(args)
  end
end

def uploadToAppCenter(token, appName, path, version)
  changelog = gitChangeLog(version)
  appcenter_upload(
    api_token: token,
    owner_name: "XAIN_AG",
    owner_type: "organization",
    app_name: appName,
    file: path,
    release_notes: changelog,
    destinations: "Collaborators",
    notify_testers: true,
  )
end
