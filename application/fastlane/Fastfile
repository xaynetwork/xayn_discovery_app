# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

import("../ios/fastlane/Fastfile")
import("./lib/properties.rb")
import("./lib/download_utils.rb")
require "./lib/git.rb"

### All the configs are in this file, eventually all project specific parts will move there
require "./lib/config.rb"

Keys = Config::Keys
Options = Config::Options
_Options = Config::InternalOptions
Platforms = Config::Platforms
Flavors = Config::Flavors
AndroidOutputs = Config::AndroidOutputs
BuildTypes = Config::BuildTypes
IS_CI = is_ci

# Common checks before running a lane
before_all do |lane, options|
  allowedOptions = Options.constants.map { |c| Options.const_get(c) }
  options.each do |k, v|
    UI.user_error!("Unknown Option ''#{k}'\nAllowed options:\n#{Options::help()}") unless allowedOptions.include?(k)
  end

  setIfNotSet = lambda { |option, alt|
    options[option] = options.key?(option) ? options[option] : alt
  }

  # set default values
  setIfNotSet.call(Options::CLEAN, IS_CI)
  setIfNotSet.call(Options::PLATFORM, Platforms::ANDROID)
  setIfNotSet.call(Options::FLAVOR, Flavors::INTERNAL)
  flavor = options[Options::FLAVOR]
  if options[Options::PLATFORM] == Platforms::ANDROID
    setIfNotSet.call(Options::ANDROID_OUTPUT, Config::ANDROID_BUILD_CONFIG[flavor][Keys::ANDROID_OUTPUT])
  end
  setIfNotSet.call(Options::BUILD_TYPE, BuildTypes::DEBUG)
  setIfNotSet.call(Options::UPLOAD_TO_APPCENTER, IS_CI)
  setIfNotSet.call(Options::COVERAGE, false)
  ## downloading the iOS adhoc profile
  setIfNotSet.call(Options::DOWNLOAD_PROFILE, IS_CI)
  setIfNotSet.call(Options::UPDATE_ASSETS, true)
  setIfNotSet.call(Options::TEST, lane == :check)

  version_name = gitVersionName()

  platform = options[Options::PLATFORM]
  offset = Config::FLAVOR_MATRIX[flavor][platform][Keys::BUILD_NUMBER_OFFSET]
  build_number = gitVersionNumber().to_i + offset
  setIfNotSet.call(Options::BUILD_NUMBER, build_number)
  setIfNotSet.call(Options::VERSION_NAME, version_name)
  setIfNotSet.call(Options::STORE, flavor == Flavors::BETA)
  options[_Options::ENV] = Config::ENV_DEFAULTS.to_h
  UI.success "Params:\n#{JSON.pretty_generate(options)}"
  options[_Options::ENV].merge!(ENV.to_h)
  if IS_CI
    UI.success "Env:\n#{JSON.pretty_generate(options[_Options::ENV])}"
  end

  if !IS_CI
    create_commit_template(options)
    install_pre_commit(options)
  end
end

# Private lanes, that we only call internally, they are nice because they have an own description
desc "Flutter build"
private_lane :build_with_flutter do |options|
  if options[Options::CLEAN]
    clean(options)
  end
  build_runner(options)

  platform = options[Options::PLATFORM]
  target = platform == Platforms::ANDROID ? options[Options::ANDROID_OUTPUT] : platform
  type = options[Options::BUILD_TYPE] == BuildTypes::RELEASE ? "--release" : "--debug"
  codesign = platform == Platforms::IOS ? "--no-codesign" : ""
  flavor = options[Options::FLAVOR]
  appName = Config::FLAVOR_MATRIX[flavor][platform][Keys::NAME]
  appId = Config::FLAVOR_MATRIX[flavor][platform][Keys::ID]
  shaders = platform == Platforms::IOS ? %W(--bundle-sksl-path flutter_01.sksl.json) : []

  defines = {
    "GIT_TAG" => options[Options::VERSION_NAME],
    "USER_APP_ID" => appId,
    "USER_APP_NAME" => appName,
    "USER_FLAVOR" => flavor,
  }

  if platform == Platforms::IOS
    defines["USER_PROVISIONING_PROFILE"] = Config::IOS_BUILD_CONFIG[flavor][Keys::PROVISIONING_PROFILE_NAME]
    defines["USER_CERTIFICATE"] = Config::IOS_BUILD_CONFIG[flavor][Keys::CERTIFICATE_NAME]
  end
  dartDefines = defines.map { |k, v| "--dart-define=#{k}=#{v}" }
  if not codesign.empty?
    dartDefines << codesign
  end
  if not shaders.empty?
    dartDefines += shaders
  end

  flutter(args: %W(build #{target} #{type} --build-number=#{options[Options::BUILD_NUMBER]} --build-name=#{options[Options::VERSION_NAME]}) + dartDefines, capture_stdout: true)
end

desc "Prepare internal key.properties"
private_lane :android_prepare_key_properties do |options|
  UI.user_error!("No PROVISIONING_PASSWORD provided!") unless ENV.key?("PROVISIONING_PASSWORD")
  provisionigPassword = ENV["PROVISIONING_PASSWORD"]
  keyAlias = Config::ANDROID_BUILD_CONFIG[options[Options::FLAVOR]][Keys::KEY_ALIAS]
  setProperties("../android/key.properties", {
    "storePassword" => provisionigPassword,
    "keyPassword" => provisionigPassword,
    "keyAlias" => keyAlias,
    "storeFile" => "releases.jks",
  })
end

desc "Set a commit message template"
private_lane :create_commit_template do |options|
  sh "git config commit.template development/commit-msg-template"
  UI.success "Commit-message template set ðŸ’ª"
end

desc "Install the gitleaks .pre-commit"
private_lane :install_pre_commit do |options|
  begin
    shell("pre-commit install")
  rescue
    UI.user_error!("Faild to run pre-commit install - Did you forget installing it? (i.e. brew install pre-commit)")
  end
end

####
#### Public lanes, can also be used via tab completion: `fastlane enable_auto_complete`
####

desc "Update strings\n" \
     "The first time the command fastlane update_strings is run, the POEditor Key will be asked to input\n" \
     "A .env file will be created containing the token\n" \
     "Following executions of the command will automatically take the token from the .env file"
lane :update_strings do |options|
  env = askAndSetProperties(".env", { "POEDITOR_API_TOKEN" => "POEDITOR_API_TOKEN" }, Config::ENV_DEFAULTS)
  download_translations(
    api_token: env["POEDITOR_API_TOKEN"],
    project_id: "502883",
    languages: "nl,en,fr,de,pl,es",
    output_dir: "lib/presentation/constants/translations/",
  )
  # Need to move default language file to translations.i18n.yaml for the i18n build generator
  shell("mv lib/presentation/constants/translations/translations_en.i18n.yaml lib/presentation/constants/translations/translations.i18n.yaml")
  build_runner(options)
end

desc "Flutter build runner"
lane :build_runner do |options|
  check_config_files(options)
  maybe_pub_get(options)
  update_assets(options)

  mode = options[Options::WATCH] ? "watch" : "build"
  flutter(args: %W(pub run build_runner #{mode} --delete-conflicting-outputs))
end

desc "Checks alle the config (env, properties, etc) if they are correctly set"
lane :check_config_files do |options|
  askAndSetProperties("../.env.dev",
                      {
    "SEARCH_API_URL_DEBUG" => "SEARCH_API_BASE_URL",
    "SEARCH_API_SECRET_DEBUG" => "SEARCH_API_SECRET_KEY",
    "IMAGE_FETCHER_URL_DEBUG" => "IMAGE_FETCHER_URL",
    "INSTABUG_TOKEN_DEBUG" => "INSTABUG_TOKEN",
    "MIXPANEL_TOKEN_DEBUG" => "MIXPANEL_TOKEN",
    "APPSFLYER_DEV_KEY" => "APPSFLYER_DEV_KEY",
    "APP_STORE_NUMERICAL_ID_DEBUG" => "APP_STORE_NUMERICAL_ID",
    "AI_ASSETS_URL" => "AI_ASSETS_URL",
    "MIXPANEL_SERVER_URL" => "MIXPANEL_SERVER_URL",
    "REVENUE_CAT_SDK_KEY_ANDROID" => "REVENUE_CAT_SDK_KEY_ANDROID",
    "REVENUE_CAT_SDK_KEY_IOS" => "REVENUE_CAT_SDK_KEY_IOS",
    "RCONFIG_ENDPOINT_URL" => "RCONFIG_ENDPOINT_URL",
    "RCONFIG_S3_REGION" => "RCONFIG_REGION",
    "RCONFIG_ACCESS_KEY" => "RCONFIG_ACCESS_KEY",
    "RCONFIG_SECRET_KEY" => "RCONFIG_SECRET_KEY"
  }, Config::ENV_DEFAULTS)

  askAndSetProperties("../.env.prod",
                      {
    "SEARCH_API_URL_PRODUCTION" => "SEARCH_API_BASE_URL",
    "SEARCH_API_SECRET_PRODUCTION" => "SEARCH_API_SECRET_KEY",
    "IMAGE_FETCHER_URL_PRODUCTION" => "IMAGE_FETCHER_URL",
    "INSTABUG_TOKEN_PRODUCTION" => "INSTABUG_TOKEN",
    "MIXPANEL_TOKEN_PRODUCTION" => "MIXPANEL_TOKEN",
    "APPSFLYER_DEV_KEY" => "APPSFLYER_DEV_KEY",
    "APP_STORE_NUMERICAL_ID_PRODUCTION" => "APP_STORE_NUMERICAL_ID",
    "AI_ASSETS_URL" => "AI_ASSETS_URL",
    "MIXPANEL_SERVER_URL" => "MIXPANEL_SERVER_URL",
    "REVENUE_CAT_SDK_KEY_ANDROID" => "REVENUE_CAT_SDK_KEY_ANDROID",
    "REVENUE_CAT_SDK_KEY_IOS" => "REVENUE_CAT_SDK_KEY_IOS",
    "RCONFIG_ENDPOINT_URL" => "RCONFIG_ENDPOINT_URL",
    "RCONFIG_S3_REGION" => "RCONFIG_REGION",
    "RCONFIG_ACCESS_KEY" => "RCONFIG_ACCESS_KEY",
    "RCONFIG_SECRET_KEY" => "RCONFIG_SECRET_KEY"
  }, Config::ENV_DEFAULTS)

  if options[Options::FLAVOR] != Flavors::INTERNAL && options[Options::BUILD_TYPE] == BuildTypes::RELEASE
    askAndSetProperties("../android/custom.properties", { "INSTABUG_TOKEN_PRODUCTION" => "INSTABUG_TOKEN" }, Config::ENV_DEFAULTS)
  else
    askAndSetProperties("../android/custom.properties", { "INSTABUG_TOKEN_DEBUG" => "INSTABUG_TOKEN" }, Config::ENV_DEFAULTS)
  end

  if options[Options::FLAVOR] == Flavors::INTERNAL
    askAndSetProperties(".env", { "AIRSHIP_INTERNAL_KEY" => "AIRSHIP_INTERNAL_KEY" }, Config::ENV_DEFAULTS)
    askAndSetProperties(".env", { "AIRSHIP_INTERNAL_SECRET" => "AIRSHIP_INTERNAL_SECRET" }, Config::ENV_DEFAULTS)
  else
    askAndSetProperties(".env", { "AIRSHIP_PROD_KEY" => "AIRSHIP_PROD_KEY" }, Config::ENV_DEFAULTS)
    askAndSetProperties(".env", { "AIRSHIP_PROD_SECRET" => "AIRSHIP_PROD_SECRET" }, Config::ENV_DEFAULTS)
  end
  generate_airship_plist(options)
  generate_airship_properties(options)
  google_services_unpack(options)
end

desc "Flutter pub get"
lane :pub_get do |options|
  flutter(args: %W(pub get))
end

desc "Watch changes for rerunning the build_runner"
lane :watch do |options|
  options[Options::WATCH] = true
  build_runner(options)
end

desc "Flutter clean"
lane :clean do |options|
  flutter(args: %W(clean))
  clean_folder("assets/ai/")
end

desc "Sanity checks (options: coverage:[true/FALSE])\n" \
     "Available options:\n" \
     "   - #{Options::COVERAGE}"
lane :check do |options|
  shell('gitleaks detect -c ../.gitleaks.toml')
  maybe_pub_get(options)
  build_runner(options)

  flutter(args: %W(analyze lib test))
  if IS_CI
     flutter(args: %W(format ./ --set-exit-if-changed))
  else
    flutter(args: %W(format ./))
  end
  flutter(args: %W(pub global activate dart_dot_reporter))
  if options[Options::COVERAGE]
    # Creates a fake test that imports all files so that lcov calculates the correct coverage
    shell('find lib ! -name "*.freezed.dart" ! -name "*.config.dart" ! -name "*.g.dart" ! -name "generated_plugin_registrant.dart"  -name *.dart  | sed \'s/lib\///\' | sed  \'s/.*/import "package:xayn_discovery_app\/&";/\' > test/all_imports_test.dart')
    shell("cat test/test_stub.dart >> test/all_imports_test.dart")
    shell("flutter test --coverage --reporter=json > machine.log || echo 'Tests failed'")
    lcov_ignore_rules = shell("cat lcov_ignore | grep -v \\# | tr '\n' ' '")
    shell("mv coverage/lcov.info coverage/original_lcov.info")
    shell("lcov --remove coverage/original_lcov.info #{lcov_ignore_rules} -o coverage/lcov.info")
    shell("genhtml coverage/lcov.info -o coverage/html")
  else
      shell("flutter test --reporter=json > machine.log || echo 'Tests failed'")
  end

  begin
    shell("flutter pub global run dart_dot_reporter machine.log --show-message")
  rescue
    UI.user_error!("Checks failed!")
  end
end

desc "Build and publish to MS AppCenter \n" \
     "Available options:\n" \
     "#{Options::help()}"
lane :publish do |options|
  platform = options[Options::PLATFORM]
  flavor = options[Options::FLAVOR]
  config = Config::FLAVOR_MATRIX[flavor][platform]
  appcenter_target = config[Keys::APPCENTER_TARGET]
  appcenter_token = config[Keys::APPCENTER_TOKEN]
  output = options[Options::ANDROID_OUTPUT]

  if platform == Platforms::ANDROID
    android_prepare_key_properties(options)
    secrets_unpack_android(options)
  end
  output = build_with_flutter(options)
  appcenter_buildfile = output[/.*Built (.*\.(?:aab|ipa|apk))/, 1]
  UI.success "Build file: #{appcenter_buildfile}"

  if platform == Platforms::IOS
    secrets_unpack_ios(options)
    Dir.chdir("../ios/fastlane") do
      ios_create_ipa(options)
      appcenter_buildfile = options[:ios_create_ipa]
    end
  end
  if options[Options::UPLOAD_TO_APPCENTER]
    UI.success "Will upload file #{appcenter_buildfile}"
    UI.user_error!("No $#{appcenter_token} provided!") unless ENV.key?(appcenter_token)
    version = options[Options::VERSION_NAME]

    if options[Options::STORE]
      output = uploadToStore(
        ENV[appcenter_token],
        appcenter_target,
        appcenter_buildfile,
        version,
        # maxChangeLogSize
        platform == Platforms::ANDROID ? 500 : -1
      )
    else
      output = uploadToAppCenter(
        ENV[appcenter_token],
        appcenter_target,
        appcenter_buildfile,
        version
      )
    end

    uploadedFile = output[/Release '\d+' committed: (.*)/, 1]
    # Write Beta report
    if flavor == Flavors::BETA
      writeBetaReport(options, uploadedFile)
    end
  end
end

desc "Update the assets folder based on the Assets Manifest from xayn_discovery_engine"
lane :update_assets do |options|
  isUnderTest = options[Options::TEST]
  manifestPath = File.join(pathFromDependency("xayn_discovery_engine"), "assets", "asset_manifest.json")
  if not manifestPath.include?("file://")
    # if manifestPath does not include file:// it means that it is define as a relative path in the pubspec.yaml.
    # since the relative path is from 'application' we add '../' to adjust it w.r.t. the current file.
    manifestPath = File.join("..", manifestPath)
  else
    manifestPath["file://"] = ""
  end
  raise "No manifest file at #{manifestPath}" unless File.file?(manifestPath)
  UI.user_error!("No AI_ASSETS_URL provided!") unless options[_Options::ENV].key?("AI_ASSETS_URL")
  UI.success("Downloading/ Checking files from Manifest: #{manifestPath}")
  downloadAssetsFromManifest(manifestPath, options[_Options::ENV]["AI_ASSETS_URL"], File.join("..", "assets", "ai"), isUnderTest)
end

desc "Takes the current tag and increments the version on the minor position and creates a new Tag.\n" \
     "So that 3.0.2 will become 3.1.0\n" \
     "It will fail if the current commit is already tagged."
lane :increment_nightly_tag do |options|
  currentCommit = shell("git rev-parse HEAD")
  currentCommit["\n"] = ""
  currentCommitTag = ""
  begin
    currentCommitTag = shell("git describe --contains #{currentCommit} 2>/dev/null")
    currentCommitTag["\n"] = ""
  rescue
  end

  UI.user_error!("This commit (#{currentCommit}) already contains a tag (#{currentCommitTag})") unless currentCommitTag == ""

  lastTag = shell("git describe --abbrev=0 --tags")
  numbers = lastTag.split(".")
  minor = numbers[1].to_i + 1
  newTag = "#{numbers[0]}.#{minor}.0"
  shell("git tag #{newTag}")
end

desc "Packs the secrets of ios/profile and exports them to the clipboard"
lane :secrets_profiles_pack do |options|
  Dir.chdir("../ios") do
    sh("tar -cz profiles/ | base64 | pbcopy")
  end
end

desc "Packs the secrets of android release keystore and exports them to the clipboard"
lane :secrets_jks_pack do |options|
    sh("cat ../android/releases.jks | base64 | pbcopy")
end

desc "Unpacks the profile based on the $PROFILES env var"
private_lane :secrets_unpack_ios do |options|
  UI.user_error!("No PROFILES provided!") unless ENV.key?("PROFILES")
  Dir.chdir("../ios/") do
    sh("echo $PROFILES | base64 -d | tar -xzv -C .")
  end
end

desc "Unpacks the release keystore"
private_lane :secrets_unpack_android do |options|
  UI.user_error!("No ANDROID_RELEASE_KEYSTORE provided!") unless ENV.key?("ANDROID_RELEASE_KEYSTORE")
  Dir.chdir("../android/") do
      sh("echo $ANDROID_RELEASE_KEYSTORE | base64 -d > releases.jks")
  end
end

desc "Generate Airship plist file"
private_lane :generate_airship_plist do |options|
    update_plist(
      plist_path: "ios/Runner/AirshipConfig.plist",
      block: proc do |plist|
        if options[Options::FLAVOR] == Flavors::INTERNAL
          plist[:developmentAppKey] = ENV["AIRSHIP_INTERNAL_KEY"]
          plist[:developmentAppSecret] = ENV["AIRSHIP_INTERNAL_SECRET"]
          plist[:productionAppKey] = ENV["AIRSHIP_INTERNAL_KEY"]
          plist[:productionAppSecret] = ENV["AIRSHIP_INTERNAL_SECRET"]
        else
          plist[:developmentAppKey] = ENV["AIRSHIP_PROD_KEY"]
          plist[:developmentAppSecret] = ENV["AIRSHIP_PROD_SECRET"]
          plist[:productionAppKey] = ENV["AIRSHIP_PROD_KEY"]
          plist[:productionAppSecret] = ENV["AIRSHIP_PROD_SECRET"]
        end
        plist[:site] = "EU"
      end
    )
end

desc "Generate Airship properties file"
private_lane :generate_airship_properties do |options|
  if options[Options::FLAVOR] == Flavors::INTERNAL
    setProperties("../android/app/src/main/assets/airshipconfig.properties", {
      "developmentAppKey" => ENV["AIRSHIP_INTERNAL_KEY"],
      "developmentAppSecret" => ENV["AIRSHIP_INTERNAL_SECRET"],
      "productionAppKey" => ENV["AIRSHIP_INTERNAL_KEY"],
      "productionAppSecret" => ENV["AIRSHIP_INTERNAL_SECRET"],
      "inProduction" => false,
      "developmentLogLevel" => "DEBUG",
      "productionLogLevel" => "ERROR",
      "notificationIcon" => "ic_notification",
      "notificationLargeIcon" => "ic_large_notification",
      "notificationAccentColor" => "#ff0000",
      "site" => "EU",
    })
  else
    setProperties("../android/app/src/main/assets/airshipconfig.properties", {
      "developmentAppKey" => ENV["AIRSHIP_PROD_KEY"],
      "developmentAppSecret" => ENV["AIRSHIP_PROD_SECRET"],
      "productionAppKey" => ENV["AIRSHIP_PROD_KEY"],
      "productionAppSecret" => ENV["AIRSHIP_PROD_SECRET"],
      "inProduction" => true,
      "developmentLogLevel" => "DEBUG",
      "productionLogLevel" => "ERROR",
      "notificationIcon" => "ic_notification",
      "notificationLargeIcon" => "ic_large_notification",
      "notificationAccentColor" => "#ff0000",
      "site" => "EU",
    })
  end
end

desc "Unpacks the google-services.json based on the $GOOGLE_SERVICES_INTERNAL_JSON and $GOOGLE_SERVICES_PROD_JSON env vars"
private_lane :google_services_unpack do |options|
  if options[Options::FLAVOR] == Flavors::INTERNAL
    UI.user_error!("No GOOGLE_SERVICES_INTERNAL_JSON provided!") unless ENV.key?("GOOGLE_SERVICES_INTERNAL_JSON")
    sh("echo $GOOGLE_SERVICES_INTERNAL_JSON > ../android/app/google-services.json")
  else
    UI.user_error!("No GOOGLE_SERVICES_PROD_JSON provided!") unless ENV.key?("GOOGLE_SERVICES_PROD_JSON")
    sh("echo $GOOGLE_SERVICES_PROD_JSON > ../android/app/google-services.json")
  end
end

def clean_folder(folder)
  if Dir.exist?("../#{folder}") && !Dir.empty?("../#{folder}")
    shell("rm -r #{folder}*")
  end
end

def shell(args)
  Dir.chdir("..") do
    sh(args)
  end
end

def uploadToAppCenter(token, appName, path, version, maxChangeLogSize = -1)
  changelog = gitShortChangeLog(version, maxChangeLogSize, false)
  return capture_stdout {
           appcenter_upload(
             api_token: token,
             owner_name: Config::APPCENTER_OWNER_NAME,
             owner_type: Config::APPCENTER_OWNER_TYPE,
             app_name: appName,
             file: path,
             release_notes: changelog,
             destinations: Config::APPCENTER_DEFAULT_TARGET,
             notify_testers: true,
           )
         }
end

def uploadToStore(token, appName, path, version, maxChangeLogSize = -1)
  changelog = gitShortChangeLog(version, maxChangeLogSize, false)
  return capture_stdout {
           appcenter_upload(
             api_token: token,
             owner_name: Config::APPCENTER_OWNER_NAME,
             owner_type: Config::APPCENTER_OWNER_TYPE,
             app_name: appName,
             file: path,
             release_notes: changelog,
             destinations: Config::APPCENTER_DEFAULT_STORE,
             destination_type: Config::APPCENTER_DESTINATION_TYPE_STORE,
             notify_testers: true,
           )
         }
end

def pathFromDependency(dependency)
  properties = loadProperties("../.packages", ":")
  path = properties[dependency]
  raise "Can not find #{dependency} in ../.packages " if (path == nil)
  return path
end

def downloadAssetsFromManifest(manifestPath, assetUrl, assetPath, justCreateEmptyFiles)
  file = File.read(manifestPath)
  data_hash = JSON.parse(file)
  data_hash["assets"].each { |a|
    suffix = a["url_suffix"]
    checksum = a["checksum"]
    if justCreateEmptyFiles
      path = "#{assetPath}/#{suffix}"
      FileUtils.mkdir_p File.dirname(path)
      File.open(path, "w") { } unless File.exist?(path)
      UI.success "Created #{path}"
    else
      downloadOnlyWhenNotMatchingSha2(assetUrl, suffix, assetPath, checksum, IS_CI)
    end
  }
end

def maybe_pub_get(options)
  lastLock = getLastModifiedForFile("../pubspec.lock")
  lastPubGet = getLastModifiedForFile("../pubspec.yaml")
  lastPackages = getLastModifiedForFile("../.packages")

  if lastPubGet == nil
    UI.user_error! "No pubspec.yaml file found!"
  end

  if lastLock == nil || lastPackages == nil || lastLock < lastPubGet
    pub_get(options)
  end
end

def capture_stdout()
  file = Tempfile.new("stdoutput")
  original_stdout = $stdout.clone
  original_stderr = $stderr.clone
  $stderr.reopen file
  $stdout.reopen file
  yield
  $stdout.flush
  $stderr.flush
  file.flush
  file.rewind
  output = file.read
  return output
ensure
  file.close
  $stdout.reopen original_stdout
  $stderr.reopen original_stderr
  print output
end

def writeBetaReport(options, uploadedFile)
  version = options[Options::VERSION_NAME]
  platform = options[Options::PLATFORM]
  buildNumber = options[Options::BUILD_NUMBER]

  report = StringIO.new()
  report.write("New Beta release *#{version}* BuildNumber: *#{buildNumber}*\n")
  report.write("Appcenter file: #{uploadedFile}\n")
  if platform == Platforms::IOS
    report.write("Testflight: https://testflight.apple.com/join/ltxuzZh7\n")
  else
    report.write("Download from store: https://play.google.com/apps/test/com.xayn.discovery/#{buildNumber}\n")
    report.write("Register: https://play.google.com/apps/testing/com.xayn.discovery\n")
    report.write("Install/Update: https://play.google.com/store/apps/details?id=com.xayn.discovery\n")
  end
  report.write("_Note that publishing might take a while, for instant testing use the internal version._\n")
  report.write(gitShortChangeLog(version, -1, false))
  file = File.new("../report.log", "w")
  file.write(report.string.truncate(3000).to_json)
  file.close
end
