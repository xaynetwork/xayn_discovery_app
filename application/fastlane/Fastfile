# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

import("../ios/fastlane/Fastfile")

#ios, android, web
platform = "android"

#apk, appbundle
android_output = "apk"

#internal, external
flavor = "internal"

#release, debug
build = "debug"

# Common checks before running a lane
before_all do |lane, options|
  options[:platform] = options[:platform] || platform
  options[:android_output] = options[:android_output] || android_output
  options[:flavor] = options[:flavor] || flavor
  options[:build] = options[:build] || build

  version_name = `git describe --tags | tr -d '\n'`
  build_number = `git rev-list --count HEAD | tr -d '\n'`
  options[:build_number] = options[:build_number] || build_number
  options[:version_name] = options[:version_name] || version_name
  puts options
end

# Private lanes, that we only call internaly, they are nice because they have an own description
desc "Flutter build"
private_lane :flutter_build do |options|
  clean(options)
  pub_get(options)
  build_runner(options)

  target = options[:platform] == "android" ? options[:android_output] : options[:platform]
  type = options[:build] == "release" ? "--release" : "--debug"
  codesign = options[:platform] == "ios" ? "--no-codesign" : ""

  flutter("build #{target} #{type} #{codesign} --build-number=#{options[:build_number]} --build-name=#{options[:version_name]} --dart-define=GIT_TAG=#{options[:version_name]}")
end

desc "Build internal apk"
private_lane :android_prepare_internal do |options|
  UI.user_error!("No PROVISIONING_PASSWORD provided!") unless ENV.key?("PROVISIONING_PASSWORD")
  provisionigPassword = ENV["PROVISIONING_PASSWORD"]
  writeProperties("../android/key.properties", {
    :storePassword => provisionigPassword,
    :keyPassword => provisionigPassword,
    :keyAlias => "release",
    :storeFile => "internal_release.jks",
  })
end

####
#### Public lanes, can also be used via tab completion: `fastlane enable_auto_complete`
####

desc "Flutter build runner"
lane :build_runner do |options|
  checkAndCreateEnv("../.env.dev", "SEARCH_API_SECRET_DEBUG", "INSTABUG_TOKEN_DEBUG", "AMPLITUDE_API_KEY_DEBUG", "api-gw.xaynet.dev", "https://img-fetcher.xaynet.dev")
  checkAndCreateEnv("../.env.prod", "SEARCH_API_SECRET_PRODUCTION", "INSTABUG_TOKEN_PRODUCTION", "AMPLITUDE_API_KEY_PRODUCTION", "api-gw.xayn.com", "https://img-fetcher.xayn.com")

  command = "pub  run build_runner build --delete-conflicting-outputs";
  begin
    flutter(command)
  rescue => ex
    pub_get(options)
    flutter(command)
  end
end

desc "Flutter pub get"
lane :pub_get do |options|
  flutter("pub get")
end

desc "Watch changes for rerunning the build_runner"
lane :watch do |options|
  flutter("packages pub run build_runner watch --delete-conflicting-outputs")
end

desc "Flutter clean"
lane :clean do |options|
  flutter("clean")
end

desc "Sanity checks"
lane :check do |options|
  pub_get(options)
  if Dir.glob("../**/env.g.dart").empty?
    build_runner(options)
  end
  flutter("analyze lib test")
  if is_ci
    flutter("format ./ --set-exit-if-changed")
  else
    flutter("format ./")
  end
  flutter("test")
end

desc "Build and publish (i.e fastlane publish platform:ios build:release)"
lane :publish do |options|
  if options[:platform] == "android"
    android_prepare_internal
  end
  flutter_build(options)
  if options[:platform] == "ios"
    Dir.chdir("../ios/fastlane") do
      ios_create_ipa(options)
    end
    UI.user_error!("No $APPCENTER_IOS_INTERNAL_TOKEN provided!") unless ENV.key?("APPCENTER_IOS_INTERNAL_TOKEN")
    uploadToAppCenter(
      ENV["APPCENTER_IOS_INTERNAL_TOKEN"],
      "Discovery-App-internal",
      "build/discovery-app.ipa",
      options[:version_name]
    )
  else
    UI.user_error!("No $APPCENTER_IOS_ANDROID_TOKEN provided!") unless ENV.key?("APPCENTER_ANDROID_INTERNAL_TOKEN")
    uploadToAppCenter(
      ENV["APPCENTER_ANDROID_INTERNAL_TOKEN"],
      "Discovery-App-Android-internal",
      "build/app/outputs/flutter-apk/app-release.apk",
      options[:version_name]
    )
  end
end

# Private helper methods
def flutter(args)
  Dir.chdir("..") do
    sh "flutter #{args}"
  end
end

def createChangelog(version)
  Dir.chdir("../") do
    gitlog = sh "git log | head -n50"
    return "Version: #{version}\n\n#{gitlog}"
  end
end

def uploadToAppCenter(token, appName, path, version)
  changelog = createChangelog(version)
  appcenter_upload(
    api_token: token,
    owner_name: "XAIN_AG",
    owner_type: "organization",
    app_name: appName,
    file: path,
    release_notes: changelog,
    destinations: "Collaborators",
    notify_testers: true,
  )
end

def checkAndCreateEnv(file, searchApiEnvKey, instabugEnvToken, amplitudeEnvApiKey, searchApiUrl, imageFetcherUrl)
  if !File.file?(file)
    searchApiSecret = ENV[searchApiEnvKey]
    if !ENV.key?(searchApiEnvKey)
      searchApiSecret = UI.input("#{searchApiEnvKey}: ")
    end

    instabugToken = ENV[instabugEnvToken]
    if !ENV.key?(instabugEnvToken)
      instabugToken = UI.input("#{instabugEnvToken}: ")
    end

    amplitudeApiKey = ENV[amplitudeEnvApiKey]
    if !ENV.key?(amplitudeEnvApiKey)
      amplitudeApiKey = UI.input("#{amplitudeEnvApiKey}: ")
    end

    writeEnvFile(file, searchApiSecret, instabugToken, amplitudeApiKey, searchApiUrl, imageFetcherUrl)
  end
end

def writeEnvFile(file, searchApiKey, instabugToken, amplitudeApiKey, searchApiUrl, imageFetcherUrl)
  writeProperties(file, {
    :SEARCH_API_BASE_URL => searchApiUrl,
    :SEARCH_API_SECRET_KEY => searchApiKey,
    :IMAGE_FETCHER_URL => imageFetcherUrl,
    :INSTABUG_TOKEN => instabugToken,
    :AMPLITUDE_API_KEY => amplitudeApiKey,
  })
end

# Clears and rewrites a properties file
def writeProperties(path, hash)
  File.delete(path) if File.exist?(path)
  File.open(path, "w") do |fo|
    hash.each do |key, value|
      fo.write("#{key}=#{value}\n")
    end
  end
end
